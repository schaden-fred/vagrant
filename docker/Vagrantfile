# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/7"
  config.vm.hostname = 'molecule'
  
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  
  # Always use port 2200 on the host for SSH port forwarding.  id: ssh allows "vagrant ssh" to work
  config.vm.network :forwarded_port, guest: 22, host: 2200, id: "ssh"
  
  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
    # Customize the amount of memory on the VM:
    vb.memory = "1024"
	vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
    vb.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
  end
  
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  
  # Install the user's public key to allow SSH access, and private key to allow github access.
  config.vm.provision "file", source: "~/.ssh/id_rsa.pub", destination: "~/.ssh/id_rsa.pub"
  config.vm.provision "file", source: "~/.ssh/id_rsa", destination: "~/.ssh/id_rsa"
  config.vm.provision "shell", inline: <<-SHELL
    echo "Setting up SSH keys"
	cat /home/vagrant/.ssh/id_rsa.pub >> /home/vagrant/.ssh/authorized_keys
	if [ -f /vagrant/known_hosts ]; then mv /vagrant/known_hosts /home/vagrant/.ssh/known_hosts; fi
	chmod 644 /home/vagrant/.ssh/known_hosts
	chmod 644 /home/vagrant/.ssh/id_rsa.pub
	chmod 600 /home/vagrant/.ssh/id_rsa
  SHELL

  # Set Timezone to Central.  If you're not in Central time, you get to code something that will get the local user's timezone and updates this accordingly.  I'm not gonna do it.
  config.vm.provision "shell", inline: <<-SHELL
    echo "Setting time zone"
    sudo rm /etc/localtime && sudo ln -s usr/share/zoneinfo/CST6CDT /etc/localtime
  SHELL

  # Allow password authentication in case the user doesn't have public keys set up.
  config.vm.provision "shell", inline: <<-SHELL
    echo "Allow login via password."
    sed -i 's/ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/g' /etc/ssh/sshd_config    
    systemctl restart sshd.service
  SHELL
   
  # Install Molecule and required packages
#  config.vm.provision "shell", inline: <<-SHELL
#    echo "Installing Molecule and updating all existing packages."
#    yum install -y epel-release
#    yum install -y gcc python-pip python-devel openssl-devel libselinux-python git
#	yum update -y
#	pip install --upgrade pip
#	#Install setuptools and molecule under the vagrant user's account.
#	runuser -l vagrant -c 'pip install --upgrade --user setuptools'
#	runuser -l vagrant -c 'pip install --user molecule'
#	runuser -l vagrant -c 'pip install --user molecule[docker]'
#  SHELL
  
  # Allow vagrant user to run docker commands by adding vagrant to the docker group
  config.vm.provision "shell", inline: <<-SHELL
    echo "Adding Vagrant to Docker group."
    groupadd docker
	usermod -aG docker vagrant
  SHELL
  
  # Install Docker and required packages
  config.vm.provision "shell", inline: <<-SHELL
    echo "Installing Docker."
    yum check-update
	yum install -y yum-utils device-mapper-persistent-data lvm2
	yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
	yum install -y docker
	systemctl start docker
	systemctl enable docker
	#systemctl status docker
  SHELL

  # Copy example roles to the VM.
  config.vm.provision "file", source: "../sample_roles", destination: "~vagrant/sample_roles"
  
  # Add required directories for ansible galaxy
  config.vm.provision "shell", inline: <<-SHELL
    echo "Creating directories needed by Ansible Galaxy"
	mkdir /usr/share/ansible
	mkdir /usr/share/ansible/roles
	mkdir /etc/ansible/roles
  SHELL
     
  # Install useful tools.  If you want anything else on the molecule VM, add it here.
  config.vm.provision "shell", inline: <<-SHELL
    echo "Installing optional utilities."
    yum install -y tree curl 
  SHELL

  # Configure git by copying config file from host.
  config.vm.provision "file", source: "~/.gitconfig", destination: "~/.gitconfig"

  # Create local clone of Ansible repo
  config.vm.provision "shell", inline: <<-SHELL
    echo "================================================================================"
	echo "================================================================================"
	echo "Cloning ansible repo.  If you have MFA enabled, this step will fail."
	echo "Manually connect to the VM and run this command to complete setup."
	echo "git clone git@github.com:serenovacorp/ansible.git ~vagrant/ansible"
	echo "================================================================================"
	echo "================================================================================"
    #if [ ! -d ~vagrant/yourrepo ]; then runuser -l vagrant -c 'git clone git@github.com:yourorg/yourrepo.git ~vagrant/yourrepo'; fi
  SHELL
  
  config.vm.post_up_message = "Your Molecule test environment is ready to use.  To connect, type 'vagrant ssh' or use your SSH client to connect to vagrant@127.0.0.1:2200 using your standard SSH key"

end
